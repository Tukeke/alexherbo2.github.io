// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var article, link, node, place_scrolly_node, snip, _i, _len, _ref;
    article = $('article');
    article.find('h1,h2,h3,h4').each(function() {
      return $(this).html("<a class=anchored href=#" + this.id + ">" + this.innerHTML + "</a>");
    });
    $('time.timeago').timeago();
    _ref = document.links;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      link = _ref[_i];
      if (link.innerHTML.match('#')) {
        $(link).addClass('tag');
      }
    }
    place_scrolly_node = function(node, selectors, node_, stop_y, min_opacity) {
      var X, node_reference, node_y, nodes, opacity, soff, target_content, y, _ref1;
      if (stop_y == null) {
        stop_y = 0;
      }
      if (min_opacity == null) {
        min_opacity = 1.0;
      }
      X = [stop_y, min_opacity];
      soff = 75;
      y = $(window).scrollTop();
      _ref1 = [null, null, null, null], node_reference = _ref1[0], target_content = _ref1[1], opacity = _ref1[2], node_y = _ref1[3];
      nodes = node.find(selectors);
      if (!nodes.length) {
        return X;
      }
      nodes.each(function() {
        var next_node_distance, next_node_y, next_nodes, opacity_y, pre_node_y;
        pre_node_y = $(this).position()['top'] - soff;
        if (y < pre_node_y) {
          return X;
        }
        node_y = pre_node_y;
        node_reference = $(this);
        target_content = $(this).html();
        opacity_y = y - (node_y + soff);
        opacity = opacity_y / soff;
        if (opacity > 1.0) {
          opacity = 1.0;
        }
        if (opacity > 0.99) {
          next_nodes = $(this).nextAll(selectors);
          if (next_nodes.length) {
            next_node_y = next_nodes.first().position()['top'];
            next_node_distance = next_node_y - y;
            if (next_node_distance <= soff * 2) {
              opacity = 1.0 / (soff - next_node_distance / 2);
            }
            if (opacity > min_opacity && next_node_distance <= soff * 2) {
              return opacity = min_opacity;
            }
          }
        }
      });
      X = [node_y, opacity];
      if (node_y < stop_y) {
        return X;
      }
      node_.css({
        opacity: opacity
      }).html(target_content);
      if (!node_reference) {
        return X;
      }
      node_.one('click', function() {
        return node_reference.scrollIntoView();
      });
      return X;
    };
    if ($('#leaf-content').length) {
      $('body').append('<div id=scrolling-nodes> <a id=scrolling-h1 href=#> <a id=scrolling-h2 href=#> <a id=scrolling-h3 href=#> <a id=scrolling-h4 href=#> </div>');
      node = $('#leaf-content');
      snip = function() {
        var id, node_, opacity, selectors, stop_y, _ref1, _ref2, _results;
        _ref1 = {
          'scrolling-h1': 'h1',
          'scrolling-h2': 'h2',
          'scrolling-h3': 'h3',
          'scrolling-h4': 'h4'
        };
        _results = [];
        for (id in _ref1) {
          selectors = _ref1[id];
          node_ = $("#" + id);
          node_.html('');
          _results.push((_ref2 = place_scrolly_node(node, selectors, node_, stop_y || 0, opacity || 1.0), stop_y = _ref2[0], opacity = _ref2[1], _ref2));
        }
        return _results;
      };
      $(window).scroll(snip);
      return $(window).resize(snip);
    }
  });

}).call(this);

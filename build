#!/usr/bin/env fish

set LOG (mktemp)

set usage 'usage: build [now] [test] [push] (ignores unrecognized commands)

Source structure
.
├── assets
│   ├── coffee
│   │   └── script.coffee
│   ├── fonts
│   │   └── menlo.ttf
│   ├── haml
│   │   └── helpers.rb
│   ├── images
│   │   └── favicon.ico
│   └── sass
│       ├── solarized.sass
│       └── style.sass
├── build
├── content
├── git
│   └── hooks
│       └── pre-push
├── layouts
│   ├── base.haml
│   └── page.haml
├── nginx.conf
└── CNAME

Building
‾‾‾‾‾‾‾‾
 . Main
1. Working directory
2. Haml Templates
3. Sass to CSS
4. CoffeeScript to JavaScript
5. Kakoune filters
6. Creating index view
7. Build pages
8. Deployment
 . Utility
'

if not echo $argv | grep .                                            >/dev/null
  echo $usage; and exit 1
end

if echo $argv | grep help                                             >/dev/null
  echo $usage; and exit 0
end

function main

  set repository (pwd)

  set branch (git-current-branch)

  set work (mktemp --directory)

  function fish_end --on-process %self
    git checkout $branch                      # Back to original branch and
    rm --recursive --force $work              # remove temporary generated files
  end

  copy . $work

  # 1. Working directory ───────────────────────────────────────────────────────

  cd $work

  make tmp

  # 2. Haml Templates ──────────────────────────────────────────────────────────

  printf 'Generate Haml Templates…'

  begin
    cp layouts/page.haml layouts/partial-page.haml
    cp layouts/base.haml layouts/page.haml
    replace '$'body'$' '=Haml::Engine.new(File.read("layouts/partial-page.haml")).render' -- layouts/page.haml
  end                                                                            1> /dev/null\
                                                                                 2> $LOG
  pass < $LOG

  # 3. Sass to CSS ─────────────────────────────────────────────────────────────

  printf 'Compiling style sheets…'

  begin
    echo 'preferred_syntax = :sass
          css_dir          = "site/css"
          sass_dir         = "assets/sass"
          images_dir       = "images"
          fonts_dir        = "fonts"
         ' > config.rb

    compass compile
  end                                                                            1> /dev/null\
                                                                                 2> $LOG
  pass < $LOG

  # 4. Coffee to JS ────────────────────────────────────────────────────────────

  printf 'Compiling JS…'

  begin
    coffee --output site/js --compile assets/coffee
  end                                                                            1> /dev/null\
                                                                                 2> $LOG
  pass < $LOG

  # 5. Kakoune filters ─────────────────────────────────────────────────────────

  set kak_filters '
  try %{
    exec \%s^><ret>gl
    exec s<<<ret>
    exec c<cite><esc>
    exec /\n\n|\n$<ret>
    exec i</cite><esc>
  }
  try %{
    exec \%s\n\n-+\n<ret>s.<ret>
    exec -draft -itersel c<br><esc>
  }
  try %{
    exec \%s^coffee$<ret>
    exec d
    exec ?\n\n|\n$<ret>
    exec %_|coffee --stdio --compile<ret>_
    exec i<script><esc>a</script>
  }
  write; quit'

  # 6. Creating index view ─────────────────────────────────────────────────────

  printf 'Creating index view…'

  begin
    set list_page tmp/list.md

    for source in (files content)

      set output (echo $source | sed s/content//';'s/.md'$'/.html/)

      if echo $source | egrep '(README|.sh$)'
        continue
      end

      set title (head -1 $source)

      set link (echo $output | replace .html '' | esed s/'(main|index)$'//)

      set commit (git log -1 --format=%h $source)

      set commit_timestamp (git log -1 --format=%ct $source)

      set commit_iso_date (git log -1 --format=%ci $source)

      echo "$commit_timestamp<h2 style=display:inline>[$title]($link)</h2> <a class=timeago title='View Commit' href=https://github.com/alexherbo2/alexherbo2.github.io/commit/$commit><time class=timeago datetime='"$commit_iso_date"'></time></a><br>" >> $list_page.lock
    end

    sort --reverse $list_page.lock | esed s/'^([0-9]+ ?)+'// > $list_page
  end                                                                            1> /dev/null\
                                                                                 2> $LOG
  pass < $LOG

  # 7. Build pages ─────────────────────────────────────────────────────────────

  printf 'Compiling pages…'

  begin
    cat $list_page | __pipe_set list_page
    replace '$'list'$' "<div style=white-space:nowrap>$list_page</div>" -- content/README.md

    for source in (files content -name '*.sh')
      set output (echo $source | replace .sh .md)
      cd (dirname $source); sh (basename $source) > (basename $output)
      cd -
    end

    for source in (files content -name '*.md')

      set output (echo $source | esed s/content/site/';'s/.md'$'/.html/';'s/'(main|README)'/index/)

      make (dirname $output)

      kak -n -e edit\ $source';'"$kak_filters" \
      >/dev/tty # stdout must be a tty

      set title (head -1 $source)

      set path (echo $source | replace content/ '')

      set commit (git log -1 --format=%h $source)

      set commit_timestamp (git log -1 --format=%ct $source)

      set commit_iso_date (git log -1 --format=%ci $source)

      set commit_date (date --date @$commit_timestamp +'%d %b %Y' 2>/dev/null)

      # Remove title
      sed --in-place 1,2d $source

      # Replace shell code snippets with Bash
      # Reason: shell is not recognized
      sub s/'```( *)sh'/'```\1bash'/ $source

      if echo $source | grep README
        set template layouts/base.haml.copy; cp layouts/base.haml $template; else
        set template layouts/page.haml.copy; cp layouts/page.haml $template;
      end

      # Replace in place
      replace '$path$'            "$path"            -- $template
      replace '$commit$'          "$commit"          -- $template
      replace '$commit-date$'     "$commit_date"     -- $template
      replace '$commit-iso-date$' "$commit_iso_date" -- $template

      # Prettify links
      sub s_'<([a-z]+)://([^>]+)>'_'[\2](\1://\2)'_g $source

      # Spotify
      sub s+'^%spotify (.*)'+'<iframe src=https://embed.spotify.com/?uri=spotify:track:\1\&theme=white width=300 height=080 frameborder=0></iframe>'+ $source

      # YouTube
      sub s+'^%youtube (.*)'+'<iframe src=https://youtube.com/embed/\1?theme=light\&color=white        width=420 height=315 frameborder=0></iframe>'+ $source

      # Gittip
      if grep '^''%'gittip'$'   $source
        sub  /'^''%'gittip'$'/d $source
      else
        replace "'"'$'gittip'$'"'" nil -- $template
      end

      # Disqus
      if not grep '^''%'disqus-identifier $source
        replace "'"'$'disqus-identifier'$'"'" nil -- $template
      end

      # Flattr
      if not grep '^''%'flattr-identifier $source
        replace "'"'$'flattr-identifier'$'"'" nil -- $template
      end

      # Pandoc front matter
      for token in (egrep '^''%''[a-z-]''+' $source)
        set key   (echo "$token" | tr --squeeze-repeats ' ' | cut --delimiter ' ' --fields 1 | cut --characters 2-)
        set value (echo "$token" | tr --squeeze-repeats ' ' | cut --delimiter ' ' --fields                      2-)

        switch $key
          case unlicense
            set key license; and set value '[unlicense](http://unlicense.org)'
        end

        replace '$'$key'$' "$value" -- $template
      end

      sub /'^''%''[a-z-]''+'/d $source

      # Haml to HTML

      haml --require ./assets/haml/helpers $template $template.html; and set template $template.html

      # Pandoc title block
      # % title
      # % author(s)
      # % date
      sub "1i% $title\n%\n%\n" $source

      # jQuery escaping
      replace '$ ' '$$ ' -- $template
      replace '$(' '$$(' -- $template

      pandoc --template $template $source --output $output

      # Post compilation

      # Pandoc + Haml(white space aware) = #fail
      sub s/^' {8}'// $output

      # Fixes index view
      sub s_'<p><a(.+?)a>(<br>)<.p>'_'<a\1a>\2'_ $output

    end
  end                                                                            1> /dev/null\
                                                                                 2> $LOG
  pass < $LOG

  # 8. Deployment ──────────────────────────────────────────────────────────────

  printf 'Deployment…'

  begin
    cd $repository

    git stash
    git checkout master

    # Cleanup
    git rm -r -f .

    mv $work/assets/images .
    mv $work/assets/fonts  .
    mv $work/site/*        .
    mv $work/CNAME         . # custom domain name
    mv $work/.gitignore    . # honor Git ignore

    git add --update
    git add .
    git amend --message=(date)

    if echo $argv | grep push
      git push --force
    end

    if echo $argv | grep test
      make ~/log/nginx \
           ~/www/alexherbo2.github.io
      rsync --archive --compress --delete * ~/www/alexherbo2.github.io

      if diff /etc/nginx/nginx.conf $work/nginx.conf | grep .
        sudo mv /etc/nginx/nginx.conf{,~}
        sudo mv $work/nginx.conf /etc/nginx
      end

      if not systemctl list-units | grep nginx
        sudo systemctl start nginx
      end
    end

    git checkout -
    git stash apply; or echo
  end                                                                            1> /dev/null\
                                                                                 2> $LOG
  pass < $LOG

  notify-send alexherbo2.github.io

end

# Utility ├─────────────────────────────────────────────────────────────────────

function pass
  if test $status = 0 ; echo ✓ | colout . green normal ;
  else                ; echo ✗ | colout . red   normal ; cat ; end
end

function make
  mkdir --parents $argv
end

function copy
  cp --recursive $argv
end

function files
  find $argv -type f
end

function esed
  sed --regexp-extended $argv
end

function sub
  esed --in-place $argv
end


main $argv

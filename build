#!/usr/bin/env fish
#│
#│ Source structure
#│ .
#│ ├── assets
#│ │   ├── coffee
#│ │   │   └── script.coffee
#│ │   ├── fonts
#│ │   │   └── menlo.ttf
#│ │   ├── haml
#│ │   │   └── helpers.rb
#│ │   ├── images
#│ │   │   └── favicon.ico
#│ │   └── sass
#│ │       ├── solarized.sass
#│ │       └── style.sass
#│ ├── build
#│ ├── content
#│ ├── git
#│ │   └── hooks
#│ │       └── pre-push
#│ ├── layouts
#│ │   ├── base.haml
#│ │   ├── page.haml
#│ │   └── post.haml
#│ ├── nginx.conf
#│ └── CNAME
#│
#│ Building
#│ ‾‾‾‾‾‾‾‾
#│  . Main
#│ 1. Working directory
#│ 2. Haml to HTML
#│ 3. Sass to CSS
#│ 4. CoffeeScript to JavaScript
#│ 5. Kakoune filters
#│ 6. Index page
#│ 7. Build pages
#│ 8. Deployment
#│  . Utility
#│

function main

  set repository (pwd)

  set branch (git-current-branch)

  set work (mktemp --directory)

  function fish_end --on-process %self
    git checkout $branch                      # Back to original branch and
    rm --recursive --force $work              # remove temporary generated files
  end

  copy . $work

  # 1. Working directory ───────────────────────────────────────────────────────

  cd $work

  make tmp

  # 2. Haml to HTML ────────────────────────────────────────────────────────────

  set   base_html   base.html
  set   page_html   page.html
  set   post_html   post.html
  set disqus_html disqus.html

  haml --require ./assets/haml/helpers layouts/{}base.haml   $base_html
  haml --require ./assets/haml/helpers layouts/{}page.haml   $page_html
  haml --require ./assets/haml/helpers layouts/{}post.haml   $post_html
  haml --require ./assets/haml/helpers layouts/disqus.haml $disqus_html

  copy   $page_html   $page_html.template
  copy   $post_html   $post_html.template
  copy $disqus_html $disqus_html.template

  include '$body$' $base_html $page_html.template                                           >   $page_html
  include '$body$' $base_html $page_html.template $post_html.template                       >   $post_html
  include '$body$' $base_html $page_html.template $post_html.template $disqus_html.template > $disqus_html

  # 3. Sass to CSS ─────────────────────────────────────────────────────────────

  echo 'preferred_syntax = :sass
        css_dir          = "site/css"
        sass_dir         = "assets/sass"
        images_dir       = "images"
        fonts_dir        = "fonts"
       ' > config.rb

  compass compile

  # 4. Coffee to JS ────────────────────────────────────────────────────────────

  set coffee assets/coffee ; and make $coffee
  set js     assets/js     ; and make $js

  coffee --compile $coffee

  mv $coffee/*.js $js

  # 5. Kakoune filters ─────────────────────────────────────────────────────────

  set kak_filters '
  try %{
    exec \%s^><ret>gl
    exec s<<<ret>
    exec c<cite><esc>
    exec /\n\n|\n$<ret>
    exec i</cite><esc>
  }
  try %{
    exec \%s\n\n-+\n<ret>s.<ret>
    exec -draft -itersel c<br><esc>
  }
  try %{
    exec \%s^coffee$<ret>
    exec d
    exec ?\n\n|\n$<ret>
    exec %_|coffee --stdio --compile<ret>_
    exec i<script><esc>a</script>
  }
  write; quit'

  # 6. Index page ──────────────────────────────────────────────────────────────

  # 6.1 List page

  set index_page tmp/index.md
  set list_page  tmp/list.md

  for source in (files content)

    set output (echo $source | sed s/content//';'s/.md'$'/.html/)

    if echo $source | egrep '(README|READING|HOWTO|.sh$)'
      continue
    end

    set title (head -1 $source)

    set link (echo $output | replace .html '' | esed s/'(main|index)$'//)

    set commit (git log -1 --format=%h $source)

    set commit_timestamp (git log -1 --format=%ct $source)

    set commit_iso_date (git log -1 --format=%ci $source)

    echo "$commit_timestamp<h2 style=display:inline>[$title]($link)</h2> <a class=timeago title='View Commit' href=https://github.com/alexherbo2/alexherbo2.github.io/commit/$commit><time class=timeago datetime='"$commit_iso_date"'></time></a><br>" >> $list_page.lock
  end

  sort --reverse $list_page.lock | esed s/'^([0-9]+ ?)+'// > $list_page

  # 7. Build pages ─────────────────────────────────────────────────────────────

  # fish sucks: Cannot save multi-line output in a variable
  # https://github.com/fish-shell/fish-shell/issues/159
  sh -c 'replace "\$list\$"    "<div style=white-space:nowrap>`cat     '$list_page'`</div>" -- content/README.md'
  sh -c 'replace "\$reading\$" "<pre style=border:0          >`cat  content/READING`</pre>" -- content/README.md'

  for source in (files content)

    # Switches to source file type
    # * Markdown
    # * Shell script handling → Markdown
    switch $source
    case '*.md'
    case '*.sh'
      set output (echo $source | replace .sh .md)
      cd (dirname $source); sh (basename $source) > (basename $output)
      cd -
      set source $output
    case '*'
      continue
    end

    set output (echo $source | esed s/content/site/';'s/.md'$'/.html/';'s/'(main|README)'/index/)

    make (dirname $output)

    kak -n -e edit\ $source';'"$kak_filters"

    set title (head -1 $source)

    set path (echo $source | replace content/ '')

    set commit (git log -1 --format=%h $source)

    set commit_timestamp (git log -1 --format=%ct $source)

    set commit_iso_date (git log -1 --format=%ci $source)

    set commit_date (date --date @$commit_timestamp +'%d %b %Y')

    # Remove title
    sed --in-place 1,2d $source

    # Replace shell code snippets with Bash
    # Reason: shell is not recognized
    sub s/'```( *)sh'/'```\1bash'/ $source

    if echo $source | egrep '(README|READING)'
      set template $page_html.copy; cp $page_html $template
    else
      if not grep comment-identifier $source
        set template $post_html.copy; cp $post_html $template
      else
        set template $disqus_html.copy; cp $disqus_html $template
      end
    end

    # Replace in place
    replace '$path$'            "$path"            -- $template
    replace '$commit$'          "$commit"          -- $template
    replace '$commit-date$'     "$commit_date"     -- $template
    replace '$commit-iso-date$' "$commit_iso_date" -- $template

    # Clickable URLs
    # sub s_' (https?://\S+\.[a-z]+)'_' [\1](\1)'_g $source

    # Spotify
    sub s+'^%spotify (.*)'+'<iframe src=https://embed.spotify.com/?uri=spotify:track:\1       width=300 height=080 frameborder=0></iframe>'+ $source

    # YouTube
    sub s+'^%youtube (.*)'+'<iframe src=https://youtube.com/embed/\1?theme=light\&color=white width=420 height=315 frameborder=0></iframe>'+ $source

    # Pandoc front matter
    set   regexp_front_matter '^''%''[a-z]''+'
    alias pandoc_front_matter "egrep '$regexp_front_matter' '$source'"
    if pandoc_front_matter

      sub /"$regexp_front_matter"/d $source
      for token in (pandoc_front_matter)
        set key   (echo "$token" | tr --squeeze-repeats ' ' | cut --delimiter ' ' --fields 1 | cut --characters 2-)
        set value (echo "$token" | tr --squeeze-repeats ' ' | cut --delimiter ' ' --fields                      2-)

        replace '$'$key'$' "$value" -- $template

      end
    end

    # Pandoc title block
    # % title
    # % author(s)
    # % date
    sub "1i% $title\n%\n%\n" $source

    # jQuery escaping
    replace '$ ' '$$ ' -- $template
    replace '$(' '$$(' -- $template

    pandoc --template $template $source --output $output

    # Pandoc + Haml(white space aware) = #fail
    sub s/^' {2}'// $output

  end

  # 8. Deployment ──────────────────────────────────────────────────────────────

  cd $repository

  git stash
  git checkout master

  # Cleanup
  git rm -r -f .

  mv $work/assets/images .
  mv $work/assets/fonts  .
  mv $work/assets/js     .
  mv $work/site/*        .
  mv $work/CNAME         . # custom domain name
  rm READING

  git add --update
  git add .
  git amend --message=(date)
  git push --force

  git checkout -
  git stash apply

  notify-send alexherbo2.github.io

end

# Utility ├─────────────────────────────────────────────────────────────────────

function make
  mkdir --parents $argv
end

function copy
  cp --recursive $argv
end

function files
  find $argv -type f
end

function esed
  sed --regexp-extended $argv
end

function sub
  esed --in-place $argv
end

function include
  ruby -e '
  def main argv
    string = argv.shift
    files = argv
    input = files.map { |file| File.read file }
    print includes string, input
  end

  def includes string, input, output=""
    return output if input.empty?
    doc = input.shift
    new_output = output.empty?? doc : output.gsub(string, doc)

    includes string, input, new_output
  end

  main ARGV
  ' $argv
end


begin
  main $argv
end >/dev/null 2>&1
